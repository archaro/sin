All single byte opcodes which may, or may not, have following arguments.

a - add values.  Pop the top two values from the stack.  If they are both
    ints, add them together as ints.  If they are both strings, concatenate.
    If only one is a string, use that value as the result.  Push the result
    onto the stack.
c - save local.  Interpret the next byte as an index into the stack, and
    store the top of the stack in that location.
d - divide ints.  Pop the top two values from the stack, divide the last by
    the first, then push the reult back on the stack.
e - retrieve local.  Interpret the next byte as an index into the stack,
    and push the value of the local stored at that location onto the stack.
f - increment local.  Interpret the next byte as an index into the stack.
    If the local stored there is an integer, increment it.  Complain if not.
g - decrement local.  Interpret the next byte as an index into the stack.
    If the local stored there is an integer, decrement it.  Complain if not.
h - halt.  Stop interpreting.
j - unconditional jump.  Interpret the next two bytes as a SIGNED short, and
    jump forward or backward in the code by this offset.
k - jump if false.  Interpret the next two bytes as a SIGNED short.  If
    The top of the stack is false, jump forward or backward in the code
    by this offset.  Otherwise, proceed to the next instruction.
l - push string literal.  Interpret the next 2 bytes as the string length,
    then read in that number of bytes as a string, then push onto the stack.
m - multiply ints.  Pop the top two values from the stack, multiply them
    together as ints, then push the reult back on the stack.
n - negate.  Pop the top value from the stack, negate it, and push back.
    Note - this assumes that the value on the stack is an int!
o - boolean equality.  Pop the top two items from the stack, compare them
    and push a boolean value back - either true or false.
p - push int.  Interpret the next 8 bytes as an 64-bit integer and push
    onto the stack.
q - boolean inequality.  The logical opposite of boolean equality.
r - boolean less than.
s - subtract ints.  Pop the top two values from the stack, subtract the
    last from the first, then push the result back on the stack.
t - boolean greater than.
u - boolean less than or equal to.
v - boolean greater than or equal to.
x - logical not the value on top of the stack.
y - logical and the two values on the top of the stack.
z - logical or the two values on the top of the stack.
A - library call.  Looks like an item, but isn't.  Interpret the first
    following byte as the library number and the second as the library
    name, then the third as the number of arguments.  Library calls always
    push a value onto the stack, even if it is nil.
B - embedded code.  Interpret the next two bytes as the length of the
    embedded code, then fetch that embedded code from the bytestream.
    Pass the embedded code to the compiler. If the compilation is
    successful, assign the result to the item on the top of the stack.
    Otherwise assign nill to the item on the top of the stack.  Set
    the value of the error item to nil if successful, or the error
    message from the compiler if not.
C - save item.  Interpret the value on the top of the stack as an item,
    then save into it the value directly below that.
D - dereference layer.  The next layer needs to be dereferenced, so it will
    either be a local variable or it will be another item.  May be nested.
E - end of item definition.  Evaluate the full item name, and push the 
    resulting item (or nil if not found) onto the stack.
F - Pop the top of the stack (which must be a valid item), and push that
    item's contents in its place.
I - begin item definition.  Start interpreting the bytecode as layer names
    or dereferences, building up the fully dereferenced item name as it
    proceeds.
L - start of simple layer name.  Interpret the next byte as an unsigned int
    and then read that number of bytes as the layer name.
P - start of parameters definition.  There follows a series of strings,
    each prefixed by a 2-byte length field.  The last string is indicated
    by two following zero bytes.  Push these strings into the local
    variable definitions and parameter count for the code block before the
    parser is called.
V - Interpret the next byte as a local variable index, turn the contents
    of that variable into a string, and use that as the layer name.
W - delete. Pop the top of the stack.  If it is a valid item, delete it.
    Push nothing.
X - exists. Pop the top of the stack.  If it is an item, push true,
    otherwise push false.
Y - nthname.  The top of the stack contains an index, and immediately below
    is an item.  Return the name of the child of the item at the given index
    or nil of there is none.

