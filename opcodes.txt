All single byte opcodes which may, or may not, have following arguments.

a - add values.  Pop the top two values from the stack.  If they are both
    ints, add them together as ints.  If they are both strings, concatenate.
    If only one is a string, use that value as the result.  Push the result
    onto the stack.
c - save local.  Interpret the next byte as an index into the stack, and
    store the top of the stack in that location.
d - divide ints.  Pop the top two values from the stack, divide the last by
    the first, then push the reult back on the stack.
e - retrieve local.  Interpret the next byte as an index into the stack,
    and push the value of the local stored at that location onto the stack.
f - increment local.  Interpret the next byte as an index into the stack.
    If the local stored there is an integer, increment it.  Complain if not.
g - decrement local.  Interpret the next byte as an index into the stack.
    If the local stored there is an integer, decrement it.  Complain if not.
h - halt.  Stop interpreting.
j - unconditional jump.  Interpret the next two bytes as a SIGNED short, and
    jump forward or backward in the code by this offset.
k - jump if false.  Interpret the next two bytes as a SIGNED short.  If
    The top of the stack is false, jump forward or backward in the code
    by this offset.  Otherwise, proceed to the next instruction.
l - push string literal.  Interpret the next 2 bytes as the string length,
    then read in that number of bytes as a string, then push onto the stack.
m - multiply ints.  Pop the top two values from the stack, multiply them
    together as ints, then push the reult back on the stack.
n - negate.  Pop the top value from the stack, negate it, and push back.
    Note - this assumes that the value on the stack is an int!
o - boolean equality.  Pop the top two items from the stack, compare them
    and push a boolean value back - either true or false.
p - push int.  Interpret the next 8 bytes as an 64-bit integer and push
    onto the stack.
q - boolean inequality.  The logical opposite of boolean equality.
r - boolean less than.
s - subtract ints.  Pop the top two values from the stack, subtract the
    last from the first, then push the result back on the stack.
t - boolean greater than.
u - boolean less than or equal to.
v - boolean greater than or equal to.
x - logical not the value on top of the stack.
y 0 logical and the two values on the top of the stack.
z - logical or the two values on the top of the stack.
C - save item.  Interpret the value on the top of the stack as an item,
    then save into it the value directly below that.
I - push item. Interpret the next 2 bytes as the string length, then read
    that number of bytes as the item name.  Find the item, evaluate it,
    and push the result onto the stack.
